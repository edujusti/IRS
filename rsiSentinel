// Thresholds
var cloud = 20;
var NDVI_T = 0.6;
var MNDWI_T = 0.4;
var IVE_T = 500;

// Brazilian border
var br = ee.FeatureCollection('projects/mapbiomas-workspace/public/data/justiniano_et_al_2022_IRS/brasil');
Map.setCenter(-48.4, -1.4, 13); // large area view may return the following error: "Output of image computation is too large"

// structures area
var NO  = ee.FeatureCollection('projects/mapbiomas-workspace/public/data/justiniano_et_al_2022_IRS/LTB_area/LTB_area_NO');
var NE  = ee.FeatureCollection('projects/mapbiomas-workspace/public/data/justiniano_et_al_2022_IRS/LTB_area/LTB_area_NE');
var CO  = ee.FeatureCollection('projects/mapbiomas-workspace/public/data/justiniano_et_al_2022_IRS/LTB_area/LTB_area_CO');
var SE1 = ee.FeatureCollection('projects/mapbiomas-workspace/public/data/justiniano_et_al_2022_IRS/LTB_area/LTB_area_SE1');
var SE2 = ee.FeatureCollection('projects/mapbiomas-workspace/public/data/justiniano_et_al_2022_IRS/LTB_area/LTB_area_SE2');
var SU  = ee.FeatureCollection('projects/mapbiomas-workspace/public/data/justiniano_et_al_2022_IRS/LTB_area/LTB_area_SU');
var LTB_area = (NO.merge(NE).merge(CO).merge(SE1).merge(SE2).merge(SE2).merge(SU));

var LTB_areaImg = LTB_area
  .reduceToImage({
    properties: ['b1'],
    reducer: ee.Reducer.first()
}).rename('b1').multiply(450).unmask();

// streets, avenues and roads kernell
var roads = ee.ImageCollection('projects/mapbiomas-workspace/public/data/justiniano_et_al_2022_IRS/roads/hmRoads').max();

// structures border kernell
var LTBborder = ee.ImageCollection('projects/mapbiomas-workspace/public/data/justiniano_et_al_2022_IRS/LTB_line/ltb')
  .sum();

var IVE = ee.ImageCollection([roads, LTB_areaImg, LTBborder]).max().clip(br).reproject('EPSG:4326', null, 10);

// definição de datas
var start = '2020-1-1';
var end   = '2020-12-31';

//Map.centerObject(geometry);

function MNDWI(image) {
  var mndwi = image.normalizedDifference(['B3', 'B11']).rename('MNDWI').toDouble();
  return image.addBands(mndwi);
}
 
function NDVI(image) {
  var ndvi = image.normalizedDifference(['B8', 'B4']).rename('NDVI').toDouble();
  return image.addBands(ndvi);
}

function maskS2clouds(image) {
  var qa = image.select('QA60');

  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

  return image.updateMask(mask)//.divide(10000);
}

var S2 = ee.ImageCollection('COPERNICUS/S2_SR')
  .filterBounds(br)
  .filterDate(start, end)
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',cloud))
  .map(MNDWI)
  .map(NDVI)
  .map(maskS2clouds)
  ;

var rgb = S2.select('B2','B3','B4').median().clip(br);
var veg = S2.select('NDVI').max().clip(br);
var water = S2.select('MNDWI').max().clip(br);

Map.addLayer(rgb, {min: 0, max: 3000, bands: ['B4', 'B3', 'B2']}, 'RGB');
//Map.addLayer(veg, {min: -0.3, max: 1, palette: ['red', 'white', 'green']}, "NDVI");
//Map.addLayer(water, {min: -1, max: 1, palette: ['gray', 'white', 'blue']}, "MNDWI");

Map.addLayer(IVE, {min:0, max:2000}, 'IVE');

var maskMNDWI = water.lt(MNDWI_T);
//Map.addLayer(maskMNDWI, {}, 'MNDWI sask');
var maskNDVI = veg.select('NDVI').lt(NDVI_T);
//Map.addLayer(maskNDVI, {}, 'NDVI Mask');

var mask = maskMNDWI.multiply(maskNDVI);
//Map.addLayer(masck, {}, 'NDVI and MNDWI mask');

var LTB = IVE.select('b1').gt(IVE_T);
var IVEmask = LTB.multiply(mask);
//Map.addLayer(IVEmask, {}, 'IRS, NDVI e MNDWI');

var mask1 = IVEmask.select('b1').eq(1);
var mask2 = IVEmask.updateMask(mask1);
Map.addLayer(mask2, {}, 'IVE, NDVI e MNDWI');

var nightCol = ee.ImageCollection('NOAA/VIIRS/DNB/MONTHLY_V1/VCMSLCFG')
  .filter(ee.Filter.date(start, end));
var night = nightCol.select('avg_rad').mean();
var nightLimite = night.gt(4);
var nightIVE = mask2.multiply(nightLimite);
Map.addLayer(nightIVE, {}, 'IRS, NDVI, MNDWI and night light');

//Map.addLayer(IVE, {min:0, max: 2000, palette:['white', 'black'], opacity:0.5}, 'IVE');

// accuracy values
/*
var points = ee.FeatureCollection("projects/mapbiomas-workspace/public/data/justiniano_et_al_2022_IRS/validation/Pt600C1").select('urb');
print(points);

var samples = mask2.unmask().sampleRegions({
  collection: points.select('urb'),
  geometries: true,
  scale: 10
});
//print(amostras);

var acuracia = samples.errorMatrix('urb', 'b1');
print('Matriz de confusão: ', acuracia);

var l1c1 = acuracia.array().get([0,0]);
var l1c2 = acuracia.array().get([0,1]);
var l2c1 = acuracia.array().get([1,0]);
var l2c2 = acuracia.array().get([1,1]);

var sensitiviy = l1c1.divide((l1c1.add(l1c2)));
print('Sensitivity', sensitiviy);

var specificity = l2c2.divide((l2c1.add(l2c2)));
print('Specificity', specificity);

print('Accuracy:' , acuracia.accuracy());
print('Producers accuracy:' , acuracia.producersAccuracy());
print('Consumers accuracy / Predictive value:' , acuracia.consumersAccuracy());
*/

//Export results to csv file
/*
Export.table.toDrive({
  collection: samples,
  description: 'Validation points',
  fileFormat: 'CSV'
});
*/

// area of municipalities by states in pixels
/*
var states = ['AC','AL','AM','AP','BA','CE','DF','ES',
  'GO','MA','MG','MS','MT','PA','PB','PE','PI',
  'PR','RJ','RN','RO','RR','RS','SC','SE','SP','TO'];

states.map(function(state){
  
//var state = 'RS'; // Select Brazilian state

var munic = ee.FeatureCollection("users/ejustiniano/FLG0244/BR_Municipios_2019")
  .select('NM_MUN', 'SIGLA_UF', 'codmunic')
  .filter(ee.Filter.eq("SIGLA_UF", state)) // first select the state
  ;

var pixelMunic = mask2.reduceRegions({
  collection: munic,
  reducer: ee.Reducer.sum(),
  scale: 10
});

var table = pixelMunic.select(['codmunic', 'NM_MUN', 'SIGLA_UF', 'sum']).select(['.*'],null,false);

Export.table.toDrive({
  collection: table,
  description: 'municipalityPixels_'+state,
  fileFormat: 'CSV'
});
  
});
*/
